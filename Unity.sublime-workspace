{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"splatSoundsS",
				"splatSoundsSource"
			],
			[
				"foot",
				"footStepSoundsSource"
			],
			[
				"land",
				"landSoundSource"
			],
			[
				"jum",
				"jumpSoundSource"
			],
			[
				"boostSoundS",
				"boostSoundSource"
			],
			[
				"springBo",
				"springBoardSoundSource"
			],
			[
				"adv",
				"advanceButtonPushSoundSource"
			],
			[
				"Re",
				"Repool\t(ObjectPool.cs)"
			],
			[
				"GameO",
				"GameObjectPool\t(ObjectPool.cs)"
			],
			[
				"Vec",
				"Vector2.up\t(PlayerScript.cs)"
			],
			[
				"Star",
				"StartCoroutine\t(Spring.cs)"
			],
			[
				"char",
				"charToTileState"
			],
			[
				"cur",
				"currentState"
			],
			[
				"state",
				"statesFileText"
			],
			[
				"Til",
				"TileGenerator"
			],
			[
				"new",
				"newState"
			],
			[
				"en",
				"enabled"
			],
			[
				"turn",
				"turn_step"
			],
			[
				"tur",
				"turn_rate"
			],
			[
				"de",
				"deltaTime"
			],
			[
				"se",
				"speed"
			],
			[
				"Bu",
				"Bullet_Type"
			],
			[
				"Sin",
				"Sine_Bullet"
			],
			[
				"rou",
				"round_duration"
			],
			[
				"d",
				"deltaTime"
			],
			[
				"Tim",
				"Time"
			],
			[
				"Time",
				"deltaTime"
			],
			[
				"roun",
				"round_t"
			],
			[
				"round",
				"round_duration"
			],
			[
				"wave",
				"wave_period"
			],
			[
				"tr",
				"transform"
			],
			[
				"radu",
				"radius_index"
			],
			[
				"rad",
				"radius_index_change"
			],
			[
				"radiu",
				"radius_index_change"
			],
			[
				"radius",
				"radius_index"
			],
			[
				"Le",
				"Length"
			],
			[
				"radi",
				"radi_speeds"
			],
			[
				"ra",
				"radius_index"
			],
			[
				"pos",
				"position"
			],
			[
				"Set",
				"SetPosition"
			],
			[
				"temp_rad",
				"temp_radius"
			],
			[
				"tem",
				"temp_radius"
			],
			[
				"temp",
				"temp_radius"
			],
			[
				"turn_",
				"turn_direction"
			],
			[
				"T",
				"TAU"
			],
			[
				"ke",
				"key1_changes_direction"
			],
			[
				"tu",
				"turn_radius"
			],
			[
				"move_",
				"move_fuel_max"
			],
			[
				"sec",
				"seconds_since_j"
			],
			[
				"cell",
				"cell_coord"
			],
			[
				"sphere",
				"spheres"
			],
			[
				"sph",
				"sphere"
			],
			[
				"Cell",
				"cell_dim"
			],
			[
				"sp",
				"spheres_per_cell"
			],
			[
				"in",
				"Int_Pair"
			],
			[
				"cel",
				"cell_coord"
			],
			[
				"ce",
				"cell_space"
			],
			[
				"cu",
				"cur_torque"
			],
			[
				"fo",
				"follow_player"
			],
			[
				"ad",
				"adjust_t"
			],
			[
				"secon",
				"seconds_since_space"
			],
			[
				"mo",
				"move_fuel_max"
			],
			[
				"pla",
				"player_offser_from_turn_origin"
			],
			[
				"line",
				"line_points"
			],
			[
				"an",
				"angle_segment"
			],
			[
				"ang",
				"angle_total"
			],
			[
				"vel",
				"velocity"
			],
			[
				"angle",
				"angle_omega"
			],
			[
				"revolut",
				"revolutions_per_unit"
			],
			[
				"ve",
				"Vector3"
			],
			[
				"vec",
				"Vector2"
			],
			[
				"ro",
				"rotation"
			],
			[
				"turen",
				"turn_time_max"
			],
			[
				"ju",
				"jump_timer"
			],
			[
				"jump",
				"jump_timer"
			],
			[
				"Get",
				"GetKey"
			],
			[
				"Ra",
				"RandomUnder"
			],
			[
				"X",
				"XorShift96"
			],
			[
				"Ran",
				"RandomEntropy"
			],
			[
				"Cur",
				"CurrentPoint"
			],
			[
				"M",
				"MyLineRenderer"
			],
			[
				"Curre",
				"CurrentPoint"
			],
			[
				"Cu",
				"CurrentAngle"
			],
			[
				"Rad",
				"RadiusRange"
			],
			[
				"St",
				"StepRange"
			],
			[
				"for",
				"for\tfor i=1,10"
			],
			[
				"LastC",
				"LastCycleCount"
			],
			[
				"Coun",
				"CountsPerSeconds"
			],
			[
				"Counts",
				"CountsThisFrame"
			],
			[
				"Q",
				"QueryPerformanceFrequency"
			],
			[
				"Sound",
				"SoundOutput"
			],
			[
				"Play",
				"PlayCursor"
			],
			[
				"x_",
				"x_input_get_state"
			],
			[
				"XInput",
				"XInputGetStateStub"
			],
			[
				"Xin",
				"XInputSetState_"
			],
			[
				"COn",
				"ControllerState"
			],
			[
				"Con",
				"ControllerIndex"
			],
			[
				"win",
				"win32_window_dimension"
			],
			[
				"BItm",
				"BitmapHeight"
			],
			[
				"Bitma",
				"BitmapMemory"
			],
			[
				"Bit",
				"BitmapHeight"
			],
			[
				"Bitmap",
				"BitmapMemorySize"
			],
			[
				"Bi",
				"BitmapMemory"
			],
			[
				"BIt",
				"BitmapMemorySize"
			],
			[
				"BitMa",
				"BitmapDeviceContext"
			],
			[
				"He",
				"Height"
			],
			[
				"font",
				"font-style"
			],
			[
				"bac",
				"background-color"
			],
			[
				"ma",
				"max-width"
			],
			[
				"mar",
				"margin-left"
			],
			[
				"max-",
				"max-height"
			],
			[
				"pad",
				"padding-left"
			],
			[
				"fon",
				"font-size"
			],
			[
				"font-s",
				"font-size"
			],
			[
				"border-b",
				"border-bottom"
			],
			[
				"pa",
				"padding"
			],
			[
				"marg",
				"margin"
			],
			[
				"bor",
				"border-radius"
			],
			[
				"tex",
				"text-align"
			],
			[
				"tabl",
				"table-cell"
			],
			[
				"ov",
				"overflow"
			],
			[
				"border-bott",
				"border-bottom-style"
			],
			[
				"min",
				"min-height"
			],
			[
				"ba",
				"background-color"
			],
			[
				"wid",
				"width"
			],
			[
				"matr",
				"margin-left"
			],
			[
				"back",
				"background-color"
			],
			[
				"font-",
				"font-weight"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class TimeControl : MonoBehaviour {\n\n    public KeyCode pauseKey;\n    private bool paused;\n\n    public AnimationCurve curve;\n\n    public float maxTimeScale = 1, minTimeScale = 0.04f;\n    public float timeScaleChangeRate = 5f;\n\n    private float t = 0;\n    private float a;\n    private float b;\n\n\t// Use this for initialization\n\tvoid Start () {\n\t\tpaused = false;\n        a = maxTimeScale;\n        b = minTimeScale;\n\t}\n\t\n\t// Update is called once per frame\n\tvoid Update () {\n        if (Input.GetKeyDown(pauseKey)) {\n            paused = !paused;\n            a = paused ? maxTimeScale : minTimeScale;\n            b = paused ? minTimeScale : maxTimeScale;\n            t = 1 - t;\n        }\n\n        if (t < 1) {\n            t += Time.unscaledDeltaTime * timeScaleChangeRate;\n        }\n        else {\n            t = 1;\n        }\n\n        Time.timeScale = Mathf.LerpUnclamped(a, b, curve.Evaluate(t));\n\t}\n}\n",
			"file": "Assets/Scripts/TimeControl.cs",
			"file_size": 992,
			"file_write_time": 131258473700000000,
			"settings":
			{
				"buffer_size": 989,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "using System.Collections;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing UnityEngine;\n\npublic class TileGenerator : MonoBehaviour\n{\n    public GameObject tilePrefab;\n    public int numRows = 10;\n    public int numColumns = 10;\n\n    private GameObject tile;\n\n    public Tile[] GenerateTiles()\n\t{\n\t    var tiles = new Tile[numColumns * numRows];\n\n\t    var firstCubePosition = new Vector3(-(numRows / 2) + 0.5f, numColumns / 2 - 0.5f, 0f);\n\n\t    for (var i = 0; i < numRows; i++)\n\t    {\n\t        for (var j = 0; j < numColumns; j++)\n\t        {\n\t            tile = Instantiate(tilePrefab, transform);\n\t            tile.name = \"Tile (\" + i + \",\" + j + \")\";\n\t            tile.transform.GetChild(0).name = \"Collider (\" + i + \",\" + j + \")\";\n\t            tile.transform.localPosition = firstCubePosition + new Vector3(j, -i, 0);\n\t            tiles[i * numColumns + j] = tile.GetComponent<Tile>();\n\t        }\n\t    }\n\n\t    return tiles;\n\t}\n}\n",
			"file": "Assets/Scripts/TileGenerator.cs",
			"file_size": 956,
			"file_write_time": 131259720370034880,
			"settings":
			{
				"buffer_size": 953,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Spike : MonoBehaviour\n{\n    public float rotationSpeed = 3f;\n\n    private void Update()\n    {\n        transform.Rotate(Vector3.back * Time.deltaTime * rotationSpeed);\n    }\n}\n",
			"file": "Assets/Scripts/Spike.cs",
			"file_size": 271,
			"file_write_time": 131259747479103072,
			"settings":
			{
				"buffer_size": 268,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Pickup : MonoBehaviour\n{\n\tpublic Sprite buttonUp, buttonDown;\n\n\tpublic delegate void PickupEvent();\n\tpublic static event PickupEvent OnPickup;\n\n\tprivate SpriteRenderer sr;\n\n\tvoid Start() {\n\t\tsr = GetComponent<SpriteRenderer>();\n\t\tsr.sprite = buttonUp;\n\t}\n\n    public void OnTriggerEnter2D(Collider2D other)\n    {\n        if (other.CompareTag(\"Player\"))\n        {\n            if (OnPickup != null)\n            {\n                OnPickup();\n            }\n\n            GetComponent<Collider2D>().enabled = false;\n\n            sr.sprite = buttonDown;\n        }\n    }\n\n    public void OnPlayerCollision()\n    {\n\t\tOnPickup();\n\n        GetComponent<Collider2D>().enabled = false;\n\n        sr.sprite = buttonDown;\n    }\n}\n",
			"file": "Assets/Scripts/Pickup.cs",
			"file_size": 810,
			"file_write_time": 131260673511383828,
			"settings":
			{
				"buffer_size": 807,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "using UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing UnityEngine.AI;\nusing UnityEngine.EventSystems;\n\n[RequireComponent(typeof(Animator))]\n\npublic class PlayerScript : MonoBehaviour {\n\n    public delegate void DeathHandler();\n\n    public static event DeathHandler OnDeath;\n\tpublic float maxSpeed = 10f;\n\tpublic float jumpForce = 700f;\n    public float springForce = 400;\n    public float boostUpForce = 400;\n    public float boostSideForce = 400;\n\n    private Vector2 velocity = new Vector2(0, 0);\n\n    public float gravity = 9.81f;\n    public float jumpHoldGravity;\n    public float fallingGravity;\n\n    private float currentGravity;\n    public float drag = 0.05f;\n\n    Animator animator;\n\n\tbool isGrounded;\n    private bool wasGrouneded;\n    private bool sideFree;\n    private bool onSpring;\n    private bool boostUp;\n    private bool boostSide;\n    private bool boostLeft;\n    private bool boostRight;\n\tbool isJumping = false;\n    bool hasJumped = false;\n\tbool leftGround = false;\n\tbool facingRight = true;\n    private bool isBall;\n\n    public GameObject bloodExplosion;\n\tpublic Transform groundCheckLeft;\n    public Transform groundCheckRight;\n    private Vector3 groundCheckOffset = new Vector3(0, 0.1f, 0);\n\n    public Transform sideCheckTop;\n    public Transform sideCheckBottom;\n\n    public Transform altSideCheckTop;\n    public Transform altSideCheckBottom;\n\n    public Transform headCheckLeft;\n    public Transform headCheckRight;\n\n    public LayerMask layersToLandOn;\n\tprivate Rigidbody2D rigidbody2D;\n\n    private CapsuleCollider2D collider2D;\n\n    private Vector3 startPosition;\n\n    private float timeFromGround;\n\n    private List<Collider2D> previousColliders = new List<Collider2D>();\n\n    private float uncontrollableTimer;\n\n\tprivate bool isDead = false;\n\n\tprivate int FootStepAnimationEvent() {\n\t\tSoundManager.single.PlayFootstepSound();\n\t\treturn 0;\n\t}\n\n\t// Use this for initialization\n\tvoid Start ()\n\t{\n\t\trigidbody2D = GetComponent<Rigidbody2D>();\n\t\tanimator = GetComponent<Animator>();\n\t\tstartPosition = transform.position;\n\t\tcollider2D = GetComponent<CapsuleCollider2D>();\n\n\t\tstartPosition = transform.position;\n\t\tcurrentGravity = gravity;\n\t}\n\n\t// Update is called once per frame\n\tvoid Update ()\n\t{\n\t\tif (isDead) {\n\t\t\tvelocity = Vector2.zero;\n\t\t\treturn;\n\t\t}\n\n\t    wasGrouneded = isGrounded;\n\n\t    isBall = isBall || isJumping;\n\n\t    if (transform.position.y < -6)\n\t    {\n\t        Respawn();\n\t    }\n\n        if (onSpring)\n        {\n            onSpring = false;\n            isJumping = false;\n            isBall = false;\n        }\n\n        if (boostUp)\n        {\n            isJumping = false;\n            isBall = true;\n            boostUp = false;\n            boostSide = false;\n\t\t\tSoundManager.single.PlayBoostSound();\n\n        }\n\n        if (boostSide)\n        {\n            isJumping = false;\n            isBall = true;\n\t\t\tSoundManager.single.PlayBoostSound();\n        }\n\t\t\t\n        RaycastHit2D raycast = CheckGround();\n\n        isGrounded = raycast && raycast.distance <= groundCheckOffset.y + 0.01f;\n        isGrounded = isGrounded && velocity.y <= 0;\n\n        if (!isGrounded)\n\t    {\n\t\t\tDebug.Log(currentGravity);\n\t        velocity.y -= currentGravity * Time.deltaTime;\n\n\t        if (raycast && raycast.distance - groundCheckOffset.y <= -(velocity.y * Time.deltaTime) && velocity.y <= 0)\n\t        {\n\t            velocity.y = -(raycast.distance - groundCheckOffset.y) / Time.deltaTime;\n\t        }\n\n\t        raycast = CheckHead();\n\n\t        if (raycast && raycast.distance <= velocity.y * Time.deltaTime)\n\t        {\n\t            velocity.y = raycast.distance / Time.deltaTime;\n\t        }\n\n\n\n\t        timeFromGround += Time.deltaTime;\n\t    }\n\t    else\n\t    {\n            hasJumped = false;\n\t        isJumping = false;\n            isBall = false;\n            timeFromGround = 0;\n            currentGravity = gravity;\n\t        velocity.y = 0;\n\n\t        if (raycast)\n\t        {\n\t            if (raycast.distance < groundCheckOffset.y - 0.01f && !onSpring)\n\t            {\n                    velocity.y += (groundCheckOffset.y - raycast.distance);\n\t            }\n\t        }\n\t    }\n\n\t    if (Input.GetButtonDown(\"Jump\") && (isGrounded || (!hasJumped)))\n\t    {\n\t        currentGravity = jumpHoldGravity;\n\n\t        velocity.y = jumpForce;\n\t        isJumping = true;\n            hasJumped = true;\n\t\t\tSoundManager.single.PlayJumpSound();\n\n\t    }\n\n\t    if (Input.GetButtonUp(\"Jump\") && isJumping)\n\t    {\n\t        currentGravity = gravity;\n\t        isJumping = false;\n\t    }\n\n\t    if (!isJumping && velocity.y < 0)\n\t    {\n\t        currentGravity = fallingGravity;\n\t    }\n\n\t    ///\n\t    /// Horizontal movement\n\t    ///\n\n\t    float move = 0;\n\t    if (uncontrollableTimer <= 0)\n\t    {\n\t        move = Input.GetAxisRaw(\"Horizontal\");\n\t        velocity.x = move * maxSpeed;\n\t    }\n\t    else\n\t    {\n\t        uncontrollableTimer -= Time.deltaTime;\n\n\t        if (Mathf.Abs(velocity.x - drag * Time.deltaTime * Mathf.Sign(velocity.x)) > 0)\n\t        {\n\t            velocity.x -= drag * Time.deltaTime * Mathf.Sign(velocity.x);\n\t        }\n\t        else\n\t        {\n\t            velocity.x = 0;\n\t        }\n\t    }\n\n\n\t    if ( move > 0 && !facingRight\n\t         || move < 0 && facingRight )\n\t    {\n\t        Flip ();\n\t    }\n\n\t    raycast = CheckSide(velocity.x);\n\n\t    var blocked = raycast && raycast.distance <= Mathf.Abs(velocity.x * Time.deltaTime);\n\n\t    if (blocked)\n\t    {\n\t        velocity.x = raycast.distance * Mathf.Sign(velocity.x) / Time.deltaTime;\n\t    }\n\n\t    if (boostSide)\n\t    {\n\t        //velocity.y = 0;\n\t    }\n\n\t    transform.position += (Vector3)velocity * Time.deltaTime;\n\n        ///\n        /// Collisions\n        ///\n        var colliders =\n\t        Physics2D.OverlapCapsuleAll(transform.position + (Vector3) collider2D.offset, collider2D.size, collider2D.direction, 0);\n\t    foreach (var collider in colliders)\n\t    {\n\t        if (collider.CompareTag(\"Pickup\"))\n\t        {\n\t            startPosition = collider.transform.position;\n\n\t            var pickup = collider.GetComponent<Pickup>();\n\t            pickup.OnPlayerCollision();\n\t        }\n\t        else if (collider.CompareTag(\"Spike\"))\n\t        {\n\t            Respawn();\n\t        }\n\n\t        if (previousColliders.Contains(collider)) continue;\n\n\t        if (collider.CompareTag(\"BoostUp\"))\n\t        {\n\t            isBall = true;\n\t            isJumping = false;\n\t            boostUp = true;\n\t            currentGravity = gravity;\n\t            velocity.y = boostUpForce;\n\t            velocity.y += collider.transform.position.y - transform.position.y;\n\t        }\n\t        else if (collider.CompareTag(\"BoostLeft\"))\n\t        {\n\t            boostSide = true;\n\n\t            isBall = true;\n\n\t            isJumping = false;\n\t            currentGravity = gravity;\n\n\t            velocity.x = -boostSideForce;\n\t            //velocity.x -= collider.transform.position.x - transform.position.x;\n\t            uncontrollableTimer = 0.5f;\n\t            velocity.y = 3f;\n\t        }\n\t        else if (collider.CompareTag(\"BoostRight\"))\n\t        {\n\t            boostSide = true;\n\n\t            isBall = true;\n\n\t            isJumping = false;\n\t            currentGravity = gravity;\n\n\t            velocity.x = boostSideForce;\n\t            //velocity.x += collider.transform.position.x - transform.position.x;\n\t            velocity.y = 3f;\n\n\t            uncontrollableTimer = 0.5f;\n\t        }\n\t\t\telse if (collider.CompareTag(\"Spring\") && velocity.y <= 0)\n\t\t\t{\n\t\t\t\tcurrentGravity = gravity;\n\t\t\t\tvar spring = collider.GetComponent<Spring>();\n\t\t\t\tspring.OnPlayerCollision();\n\t\t\t\tonSpring = true;\n\t\t\t\tvelocity.y = springForce;\n\t\t\t}\n\t    }\n\n\t    previousColliders = colliders.ToList();\n\n\t    animator.SetFloat(\"Speed\", Mathf.Abs(velocity.x / maxSpeed));\n\t\tanimator.SetBool(\"IsGrounded\", isGrounded );\n\t\tanimator.SetBool(\"IsJumping\", isBall );\n\n\t\tif (wasGrouneded && !isGrounded)\n\t\t{\n\t\t\tleftGround = true;\n\t\t\tanimator.SetTrigger(\"LeftGround\");\n\t\t}\n\t\telse if(!wasGrouneded && isGrounded) {\n\t\t\tSoundManager.single.PlayLandSound();\n\t\t}\n\n\n\t}\n\n    private RaycastHit2D CheckSide(float velocity)\n    {\n        var rays = new List<RaycastHit2D>\n        {\n            Physics2D.Raycast(sideCheckBottom.position, Vector2.right * Mathf.Sign(velocity), 10,\n                1 << LayerMask.NameToLayer(\"Solid\")),\n            Physics2D.Raycast(sideCheckTop.position, Vector2.right * Mathf.Sign(velocity), 10,\n                1 << LayerMask.NameToLayer(\"Solid\")),\n        };\n\n        if (uncontrollableTimer > 0)\n        {\n            rays.Add(Physics2D.Raycast(altSideCheckBottom.position, Vector2.right * Mathf.Sign(velocity), 11,\n                1 << LayerMask.NameToLayer(\"Solid\")));\n            rays.Add(Physics2D.Raycast(altSideCheckTop.position, Vector2.right * Mathf.Sign(velocity), 11,\n                1 << LayerMask.NameToLayer(\"Solid\")));\n        }\n\n        return rays.Where(ray => ray)\n            .OrderBy(ray => ray.distance)\n            .FirstOrDefault();\n    }\n\n    private RaycastHit2D CheckGround()\n    {\n        var left = Physics2D.Raycast(groundCheckLeft.position, Vector2.down, 10,\n            1 << LayerMask.NameToLayer(\"Solid\"));\n\n        var right = Physics2D.Raycast(groundCheckRight.position, Vector2.down, 10,\n            1 << LayerMask.NameToLayer(\"Solid\"));\n\n        if (left && right)\n        {\n            return left.distance > right.distance ? right : left;\n        }\n\n        return left ? left : right;\n    }\n\n    private RaycastHit2D CheckHead()\n    {\n        var left = Physics2D.Raycast(headCheckLeft.position, Vector2.up, 10,\n            1 << LayerMask.NameToLayer(\"Solid\"));\n\n        var right = Physics2D.Raycast(headCheckRight.position, Vector2.up, 10,\n            1 << LayerMask.NameToLayer(\"Solid\"));\n\n        if (left && right)\n        {\n            return left.distance > right.distance ? right : left;\n        }\n\n        return left ? left : right;\n    }\n\n\tvoid Flip ()\n\t{\n\t\tVector3 tmp = transform.localScale;\n\t\ttmp.x *= -1;\n\t\ttransform.localScale = tmp;\n\n\t\tfacingRight = !facingRight;\n\t}\n\n    private void Respawn()\n    {\n\t\tSoundManager.single.PlaySplatSound();\n\n        isJumping = false;\n        isBall = false;\n\n        if (OnDeath != null)\n            OnDeath();\n\n        Instantiate(bloodExplosion, transform.position, Quaternion.identity);\n        transform.position = new Vector3(-20, 20, 0);\n        velocity = Vector2.zero;\n\t\tisDead = true;\n\n\t\tStartCoroutine(RespawnReturn());\n    }\n\n\tprivate IEnumerator RespawnReturn() {\n\t\tyield return new WaitForSeconds(0.5f);\n\t\ttransform.position = new Vector3(startPosition.x, startPosition.y, 0);\n\t\tisDead = false;\n\t}\n\n    private void OnTriggerEnter2D(Collider2D other)\n    {\n        Debug.Log(other.tag);\n\n        if (other.CompareTag(\"BoostUp\"))\n        {\n            boostUp = true;\n\n            velocity.y = boostUpForce;\n            velocity.y += other.transform.position.y - transform.position.y;\n        }\n        else if (other.CompareTag(\"BoostLeft\"))\n        {\n            boostSide = true;\n\n            velocity.x = -boostSideForce;\n            //velocity.x -= other.transform.position.x - transform.position.x;\n        }\n        else if (other.CompareTag(\"BoostRight\"))\n        {\n            boostSide = true;\n\n            velocity.x = boostSideForce;\n            \n\t\t\t//velocity.x += other.transform.position.x - transform.position.x;\n        }\n    }\n}\n",
			"file": "Assets/Scripts/PlayerScript.cs",
			"file_size": 11358,
			"file_write_time": 131261187503828872,
			"settings":
			{
				"buffer_size": 11355,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class GameObjectPool : MonoBehaviour {\n\n    public GameObject prefab;\n    public int addAmount = 256;\n    private Queue<GameObject> poolQueue;\n    private int firstActive;\n\n    void Start() {\n        Upscale();\n    }\n\n    public GameObject Depool() {\n        if (!poolQueue.Peek()) {\n            Upscale();\n        }\n        var result =  poolQueue.Dequeue();\n        result.SetActive(true);\n        return result;\n    }\n\n    public void Repool(GameObject go) {\n        go.SetActive(false);\n        poolQueue.Enqueue(go);\n    }\n\n    void Upscale() {\n        for (int i = 0; i < addAmount; ++i) {\n            var go = Instantiate(prefab);\n            go.SetActive(false);\n            poolQueue.Enqueue(go);\n        }\n    }\n\n}\n",
			"file": "Assets/Scripts/ObjectPool.cs",
			"file_size": 815,
			"file_write_time": 131260085153897333,
			"settings":
			{
				"buffer_size": 812,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class GameObjectPool : MonoBehaviour {\n\n    public GameObject prefab;\n    public int addAmount = 256;\n    private Queue<GameObject> poolQueue;\n    private int firstActive;\n\n    void Start() {\n        poolQueue = new Queue<GameObject>();\n        Upscale();\n    }\n\n    public GameObject Depool() {\n        if (!poolQueue.Peek()) {\n            Upscale();\n        }\n        var result =  poolQueue.Dequeue();\n        result.SetActive(true);\n        return result;\n    }\n\n    public void Repool(GameObject go) {\n        go.SetActive(false);\n        poolQueue.Enqueue(go);\n    }\n\n    void Upscale() {\n        for (int i = 0; i < addAmount; ++i) {\n            var go = Instantiate(prefab);\n\t\t\tgo.transform.parent = this.transform;\n            go.SetActive(false);\n            poolQueue.Enqueue(go);\n        }\n    }\n\n}\n",
			"file": "Assets/Scripts/GameObjectPool.cs",
			"file_size": 901,
			"file_write_time": 131260096083496053,
			"settings":
			{
				"buffer_size": 898,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\nif sign(input.x) != sign(vel.x):\n    vel.x = input.x\nelse:\n    vel.x += input.x",
			"settings":
			{
				"buffer_size": 80,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class SoundManager : MonoBehaviour\n{\n\tpublic static SoundManager single;\n\tpublic AudioClip advanceButtonPushSound;\n\tpublic AudioClip springBoardSound;\n\tpublic AudioClip boostSound;\n\tpublic AudioClip landSound;\n\tpublic AudioClip jumpSound;\n\tpublic AudioClip[] splatSounds;\n\tpublic AudioClip[] footStepSounds;\n\tpublic AudioSource _source;\n\tprivate AudioSource advanceButtonPushSoundSource, springBoardSoundSource, boostSoundSource, landSoundSource, jumpSoundSource, splatSoundsSource, footStepSoundsSource;\n\tprivate int avoidFootstepIndex;\n\tprivate int avoidSplatIndex;\n\n    private void Awake()\n    {\n\t\tif (single == null) {\n\t\t\tsingle = this;\n\t\t\t_source = GetComponent<AudioSource>();\n\n\t\t\tadvanceButtonPushSoundSource = gameObject.AddComponent<AudioSource>();\n\t\t\tadvanceButtonPushSoundSource.clip = advanceButtonPushSound;\n\n\t\t\tspringBoardSoundSource = gameObject.AddComponent<AudioSource>();\n\t\t\tspringBoardSoundSource.clip = springBoardSound;\n\t\t\n\t\t\tboostSoundSource = gameObject.AddComponent<AudioSource>();\n\t\t\tboostSoundSource.clip = boostSound;\n\t\t\n\t\t\tlandSoundSource = gameObject.AddComponent<AudioSource>();\n\t\t\tlandSoundSource.clip = landSound;\n\t\t\n\t\t\tjumpSoundSource = gameObject.AddComponent<AudioSource>();\n\t\t\tjumpSoundSource.clip = jumpSound;\n\n\t\t\tsplatSoundsSource = gameObject.AddComponent<AudioSource>();\n\t\t\tfootStepSoundsSource = gameObject.AddComponent<AudioSource>();\n\t\t}\n    }\n\n\tprivate int PlayRandomSound(AudioSource src, AudioClip[] clips, int avoidIndex=-1) {\n\t\tint index;\n\t\tdo {\n\t\t\tindex = Random.Range(0, clips.Length -1);\n\t\t} while (index == avoidIndex);\n\t\tsrc.clip = clips[index];\n\t\tsrc.Play();\n\t\treturn index;\n\t}\n\n\tpublic void PlayAdvanceSound() { advanceButtonPushSoundSource.Play();}\n\tpublic void PlaySpringBoardSound() { springBoardSoundSource.Play(); }\n\tpublic void PlayBoostSound() { boostSoundSource.Play(); }\n\tpublic void PlayJumpSound() { jumpSoundSource.Play(); }\n\tpublic void PlayLandSound() { landSoundSource.Play(); }\n\tpublic void PlayFootstepSound() {\n\t\tavoidFootstepIndex = PlayRandomSound(footStepSoundsSource, footStepSounds, avoidFootstepIndex);\n\t}\n\n\tpublic void PlaySplatSound() {\n\t\tavoidSplatIndex = PlayRandomSound(splatSoundsSource, splatSounds, avoidSplatIndex);\n\t}\n\n}\n",
			"file": "Assets/Scripts/SoundManager.cs",
			"file_size": 2301,
			"file_write_time": 131260586533543423,
			"settings":
			{
				"buffer_size": 2298,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "using UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing UnityEditor;\nusing UnityEngine.AI;\nusing UnityEngine.EventSystems;\n\n[RequireComponent(typeof(Animator))]\n\npublic class PlayerScript : MonoBehaviour {\n\n    public delegate void DeathHandler();\n\n    public static event DeathHandler OnDeath;\n\tpublic float maxSpeed = 10f;\n\tpublic float jumpForce = 700f;\n    public float springForce = 400;\n    public float boostUpForce = 400;\n    public float boostSideForce = 400;\n\n    private Vector2 velocity = new Vector2(0, 0);\n\n    public float gravity = 9.81f;\n    public float jumpHoldGravity;\n    public float fallingGravity;\n\n    private float currentGravity;\n    public float drag = 0.05f;\n\n    Animator animator;\n\n\tbool isGrounded;\n    private bool wasGrouneded;\n    private bool sideFree;\n    private bool onSpring;\n    private bool boostUp;\n    private bool boostSide;\n    private bool boostLeft;\n    private bool boostRight;\n\tbool isJumping = false;\n\tbool leftGround = false;\n\tbool facingRight = true;\n    private bool isBall;\n\n    public GameObject bloodExplosion;\n\tpublic Transform groundCheckLeft;\n    public Transform groundCheckRight;\n    private Vector3 groundCheckOffset = new Vector3(0, 0.1f, 0);\n\n    public Transform sideCheckTop;\n    public Transform sideCheckBottom;\n\n    public Transform altSideCheckTop;\n    public Transform altSideCheckBottom;\n\n    public Transform headCheckLeft;\n    public Transform headCheckRight;\n\n    public LayerMask layersToLandOn;\n\tprivate Rigidbody2D rigidbody2D;\n\n    private CapsuleCollider2D collider2D;\n\n    private Vector3 startPosition;\n\n    private float timeFromGround;\n\n    private List<Collider2D> previousColliders = new List<Collider2D>();\n\n    private float uncontrollableTimer;\n\n\t// Use this for initialization\n\tvoid Start ()\n\t{\n\t\trigidbody2D = GetComponent<Rigidbody2D>();\n\t\tanimator = GetComponent<Animator>();\n\t    collider2D = GetComponent<CapsuleCollider2D>();\n\n\t    startPosition = transform.position;\n\t    currentGravity = gravity;\n\t}\n\t\n\t// Update is called once per frame\n\tvoid Update ()\n\t{\n\t    wasGrouneded = isGrounded;\n\n\t    isBall = isBall || isJumping;\n\n\t    if (transform.position.y < -6)\n\t    {\n\t        Respawn();\n\t    }\n\n\t    RaycastHit2D raycast = CheckGround();\n\n\t    isGrounded = !(!raycast || raycast.distance > groundCheckOffset.y + 0.01f);\n\n\t    if (onSpring)\n\t    {\n\t        velocity.y = springForce;\n\t        onSpring = false;\n\t        isJumping = false;\n\t        isBall = false;\n\t    }\n\n\t    if (boostUp)\n\t    {\n\t        isJumping = false;\n\t        isBall = true;\n\t        boostUp = false;\n\t        boostSide = false;\n\t    }\n\n\t    if (boostSide)\n\t    {\n\t        isJumping = false;\n\t        isBall = true;\n\t    }\n\n\n\t    if (!isGrounded)\n\t    {\n\t        velocity.y -= currentGravity * Time.deltaTime;\n\n\t        if (raycast && raycast.distance - groundCheckOffset.y <= -(velocity.y * Time.deltaTime))\n\t        {\n\t            velocity.y = -(raycast.distance - groundCheckOffset.y) / Time.deltaTime;\n\n\t            if (raycast.collider.CompareTag(\"Spring\"))\n\t            {\n\t                currentGravity = gravity;\n\t                var spring = raycast.collider.GetComponent<Spring>();\n\t                spring.OnPlayerCollision();\n\t                onSpring = true;\n\t            }\n\t        }\n\n\t        raycast = CheckHead();\n\n\t        if (raycast && raycast.distance <= velocity.y * Time.deltaTime)\n\t        {\n\t            velocity.y = raycast.distance / Time.deltaTime;\n\t        }\n\n\n\n\t        timeFromGround += Time.deltaTime;\n\t    }\n\t    else\n\t    {\n\t        if (velocity.y <= 0)\n\t        {\n\t            isJumping = false;\n                isBall = false;\n                timeFromGround = 0;\n                currentGravity = gravity;\n\t            velocity.y = 0;\n\t        }\n\n\t        raycast = CheckGround();\n\n\t        if (raycast)\n\t        {\n\n                //if (raycast.collider.CompareTag(\"Spring\"))\n                switch(raycast.collider.tag)\n                {\n                    case \"Spring\":\n    \t            {\n\t                    currentGravity = gravity;\n\t                    var spring = raycast.collider.GetComponent<Spring>();\n    \t                spring.OnPlayerCollision();\n    \t                onSpring = true;\n    \t            } break;\n                    case \"Spike\":\n                    {\n                        // ...\n                    } break;\n                }\n\n\n\t            if (raycast.distance <= groundCheckOffset.y + Mathf.Epsilon)\n\t            {\n\t                velocity.y += (groundCheckOffset.y - raycast.distance);\n\t            }\n\t        }\n\t    }\n\n\t    if (Input.GetButtonDown(\"Jump\") && (isGrounded || (timeFromGround < 0.15f && !isJumping)))\n\t    {\n\t        currentGravity = jumpHoldGravity;\n\n\t        velocity.y += jumpForce;\n\t        isJumping = true;\n\t    }\n\n\t    if (isJumping && Input.GetButtonUp(\"Jump\"))\n\t    {\n\t        currentGravity = gravity;\n\t        isJumping = false;\n\t    }\n\n\t    if (!isJumping && velocity.y < 0)\n\t    {\n\t        currentGravity = fallingGravity;\n\t    }\n\n\t    ///\n\t    /// Horizontal movement\n\t    ///\n\n\t    float move = 0;\n\t    if (uncontrollableTimer <= 0)\n\t    {\n\t        move = Input.GetAxisRaw(\"Horizontal\");\n\n\t        velocity.x = move * maxSpeed;\n\t    }\n\t    else\n\t    {\n\t        uncontrollableTimer -= Time.deltaTime;\n\n\t        if (Mathf.Abs(velocity.x - drag * Time.deltaTime * Mathf.Sign(velocity.x)) > 0)\n\t        {\n\t            velocity.x -= drag * Time.deltaTime * Mathf.Sign(velocity.x);\n\t        }\n\t        else\n\t        {\n\t            velocity.x = 0;\n\t        }\n\t    }\n\n\n\t    if ( move > 0 && !facingRight\n\t         || move < 0 && facingRight )\n\t    {\n\t        Flip ();\n\t    }\n\n\t    raycast = CheckSide(velocity.x);\n\n\t    var blocked = raycast && raycast.distance <= Mathf.Abs(velocity.x * Time.deltaTime);\n\n\t    if (blocked)\n\t    {\n\t        velocity.x = raycast.distance * Mathf.Sign(velocity.x) / Time.deltaTime;\n\t    }\n\n\t    if (boostSide)\n\t    {\n\t        //velocity.y = 0;\n\t    }\n\n\t    transform.position += (Vector3)velocity * Time.deltaTime;\n\n\t    ///\n\t    /// Collisions\n\t    ///\n\t    var colliders =\n\t        Physics2D.OverlapCapsuleAll(transform.position + (Vector3) collider2D.offset, collider2D.size, collider2D.direction, 0);\n\t    foreach (var collider in colliders)\n\t    {\n\t        if (collider.CompareTag(\"Pickup\"))\n\t        {\n\t            startPosition = collider.transform.position;\n\n\t            var pickup = collider.GetComponent<Pickup>();\n\t            pickup.OnPlayerCollision();\n\t        }\n\t        else if (collider.CompareTag(\"Spike\"))\n\t        {\n\t            Respawn();\n\t        }\n\n\t        if (previousColliders.Contains(collider)) continue;\n\n\t        if (collider.CompareTag(\"BoostUp\"))\n\t        {\n\t            Debug.Log(\"What\");\n\n\t            isBall = true;\n\t            isJumping = false;\n\t            boostUp = true;\n\t            currentGravity = gravity;\n\t            velocity.y = boostUpForce;\n\t            velocity.y += collider.transform.position.y - transform.position.y;\n\t        }\n\t        else if (collider.CompareTag(\"BoostLeft\"))\n\t        {\n\t            boostSide = true;\n\n\t            isBall = true;\n\n\t            isJumping = false;\n\t            currentGravity = gravity;\n\n\t            velocity.x = -boostSideForce;\n\t            //velocity.x -= collider.transform.position.x - transform.position.x;\n\t            uncontrollableTimer = 0.5f;\n\t            velocity.y = 3f;\n\t        }\n\t        else if (collider.CompareTag(\"BoostRight\"))\n\t        {\n\t            boostSide = true;\n\n\t            isBall = true;\n\n\t            isJumping = false;\n\t            currentGravity = gravity;\n\n\t            velocity.x = boostSideForce;\n\t            //velocity.x += collider.transform.position.x - transform.position.x;\n\t            velocity.y = 3f;\n\n\t            uncontrollableTimer = 0.5f;\n\t        }\n\t    }\n\n\t    previousColliders = colliders.ToList();\n\n\t    animator.SetFloat(\"Speed\", Mathf.Abs(velocity.x / maxSpeed));\n\t\tanimator.SetBool(\"IsGrounded\", isGrounded );\n\t\tanimator.SetBool(\"IsJumping\", isBall );\n\n\t\tif (wasGrouneded && !isGrounded)\n\t\t{\n\t\t\tleftGround = true;\n\t\t\tanimator.SetTrigger(\"LeftGround\");\n\t\t}\n\n\n\t}\n\n    private RaycastHit2D CheckSide(float velocity)\n    {\n        var rays = new List<RaycastHit2D>\n        {\n            Physics2D.Raycast(sideCheckBottom.position, Vector2.right * Mathf.Sign(velocity), 10,\n                1 << LayerMask.NameToLayer(\"Solid\")),\n            Physics2D.Raycast(sideCheckTop.position, Vector2.right * Mathf.Sign(velocity), 10,\n                1 << LayerMask.NameToLayer(\"Solid\")),\n        };\n\n        if (uncontrollableTimer > 0)\n        {\n            rays.Add(Physics2D.Raycast(altSideCheckBottom.position, Vector2.right * Mathf.Sign(velocity), 11,\n                1 << LayerMask.NameToLayer(\"Solid\")));\n            rays.Add(Physics2D.Raycast(altSideCheckTop.position, Vector2.right * Mathf.Sign(velocity), 11,\n                1 << LayerMask.NameToLayer(\"Solid\")));\n        }\n\n        return rays.Where(ray => ray)\n            .OrderBy(ray => ray.distance)\n            .FirstOrDefault();\n    }\n\n    private RaycastHit2D CheckGround()\n    {\n        var left = Physics2D.Raycast(groundCheckLeft.position, Vector2.down, 10,\n            1 << LayerMask.NameToLayer(\"Solid\"));\n\n        var right = Physics2D.Raycast(groundCheckRight.position, Vector2.down, 10,\n            1 << LayerMask.NameToLayer(\"Solid\"));\n\n        if (left && right)\n        {\n            return left.distance > right.distance ? right : left;\n        }\n\n        return left ? left : right;\n    }\n\n    private RaycastHit2D CheckHead()\n    {\n        var left = Physics2D.Raycast(headCheckLeft.position, Vector2.up, 10,\n            1 << LayerMask.NameToLayer(\"Solid\"));\n\n        var right = Physics2D.Raycast(headCheckRight.position, Vector2.up, 10,\n            1 << LayerMask.NameToLayer(\"Solid\"));\n\n        if (left && right)\n        {\n            return left.distance > right.distance ? right : left;\n        }\n\n        return left ? left : right;\n    }\n\n    /*private void OnCollisionEnter2D(Collision2D collision)\n    {\n        var other = collision.collider;\n\n        if (other.CompareTag(\"Spring\"))\n        {\n            if (collision.contacts[0].point.y < transform.position.y)\n            {\n                isJumping = true;\n                leftGround = false;\n                rigidbody2D.AddForce(new Vector2(0, springForce));\n            }\n        }\n        else if (other.CompareTag(\"Tile\"))\n        {\n            if (collision.contacts[0].point.y < transform.position.y)\n            {\n                isGrounded = true;\n            }\n        }\n    }*/\n\n\tvoid Flip ()\n\t{\n\t\tVector3 tmp = transform.localScale;\n\t\ttmp.x *= -1;\n\t\ttransform.localScale = tmp;\n\n\t\tfacingRight = !facingRight;\n\t}\n\n    private void Respawn()\n    {\n        isJumping = false;\n        isBall = false;\n\n        if (OnDeath != null)\n            OnDeath();\n\n        Instantiate(bloodExplosion, transform.position, Quaternion.identity);\n        transform.position = startPosition;\n        velocity = Vector2.zero;\n    }\n\n    private void OnTriggerEnter2D(Collider2D other)\n    {\n        Debug.Log(other.tag);\n\n        if (other.CompareTag(\"BoostUp\"))\n        {\n            boostUp = true;\n\n            velocity.y = boostUpForce;\n            velocity.y += other.transform.position.y - transform.position.y;\n        }\n        else if (other.CompareTag(\"BoostLeft\"))\n        {\n            boostSide = true;\n\n            velocity.x = -boostSideForce;\n            //velocity.x -= other.transform.position.x - transform.position.x;\n        }\n        else if (other.CompareTag(\"BoostRight\"))\n        {\n            boostSide = true;\n\n            velocity.x = boostSideForce;\n            //velocity.x += other.transform.position.x - transform.position.x;\n        }\n    }\n}\n",
			"file": "/C/Files/Development/Game_Jam/LudumDare37_merger/LudumDare37/Assets/Scripts/PlayerScript.cs",
			"file_size": 11802,
			"file_write_time": 131260618309250596,
			"settings":
			{
				"buffer_size": 11799,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "__________\n##########\n##########\n__________\n__________\n__________\n____##____\n__________\n__________\n__________\n\n##########\n#_______+#\n#_@_LR___#\n#________#\n#U_______#\n#######__#\n#________#\n#________#\n#______*S#\n##########\n\n##########\n#________#\n#________#\n#______*_#\n#_____####\n#________#\n###______#\n###______#\n######___#\n##########\n\n##########\n#________#\n#________#\n#________#\n#_____####\n#_*______#\n###______#\n#________#\n#________#\n#________#\n\n##########\n#________#\n#________#\n#______*_#\n#_____####\n#________#\n###______#\n#________#\n#________#\n#________#\n\n##########\n#________#\n#________#\n#________#\n#________#\n#________#\n#________#\n#________#\n#_*______#\n#####____#\n\n##########\n#________#\n#_*______#\n#________#\n########_#\n#________#\n#_______S#\n#___######\n#___######\n##########\n\n##########\n#________#\n#________#\n#________#\n#________#\n#_______*#\n#______###\n#________#\n#____S___#\n#___###__#\n\n##########\n#________#\n#________#\n#________#\n#________#\n#_*______#\n#________#\n#________#\n#________#\n#S__SS__S#\n\n__________\n__________\n_______*__\n_____###__\n_###______\n__________\n#####_____\n__________\n__________\n__________\n\n__________\n__________\n_##_______\n#____#____\n#_##_#_#__\n#_*#_#__#_\n_##___##__\n_______###\n__________\n__________\n\n##########\n#________#\n#________#\n#________#\n#________#\n#________#\n#________#\n#________#\n#____+_*_#\n##########\n\n##########\n#________#\n#________#\n#________#\n#________#\n#________#\n#________#\n#____+___#\n#_*__+___#\n##########\n\n##########\n#________#\n#________#\n#________#\n#____*___#\n#________#\n#________#\n#______+##\n#___+#++##\n##########\n\n++++++++++\n+________+\n+_____*__+\n+________+\n+_#______+\n+________+\n+______##+\n+###_____+\n+________+\n+__#######\n\n++++++++++\n+_+______+\n+_+______+\n+_+___###+\n+_#+__+__+\n+__+___+_+\n+___+___#+\n+###_+___+\n+__*_____+\n+########+\n\n++++++++++\n+________+\n+________+\n+________+\n+________+\n+__*_++__+\n+________+\n+________+\n+_____+SS+\n+########+\n\n+++______+\n+________+\n+*____+__+\n+#####+__+\n+____++__+\n+____++S_+\n+____+++_+\n+________+\n+____S__S+\n+########+\n\n++++++++++\n____+____+\n____+____+\n____+____+\n____+____+\n_____+*__+\n__+___+__+\n__+______+\n__+______+\n+S++#+S+++\n\n++++++++++\n_________+\n_________+\n____+____+\n____+____+\n_____+___+\n__+___S+++\n__+______+\n__+_*____+\n+S++#+++++\n\n#________#\n#_______*#\n#__#######\n#U_______#\n#________#\n#________#\n#######U_#\n#________#\n#________#\n##########\n\n#__*______\n#_____#___\n#U____#___\n#_____#___\n#__U__#___\n#_____#___\n#____U____\n#_________\n#_________\n##########\n\n#_________\n#_____#___\n#_____#_*_\n#_____#___\n#_____#_U_\n#_____#___\n#_______U_\n#_________\n#__U__U___\n__________\n\n#__*______\n#_____#___\n#U____#___\n#_+___#___\n#U_+__#___\n#_U___#___\n#__U______\n#_________\n#_________\n_____#####\no\n\n#*_R_R____\n#_____#___\n#U____#___\n#_+___#___\n#U_+__#___\n#_U___#___\n#__U_L____\n#_________\n#_________\n________##",
			"file": "/C/Files/Development/Game_Jam/LudumDare37_merger/LudumDare37/Assets/all_states.txt",
			"file_size": 3046,
			"file_write_time": 131261205454212214,
			"settings":
			{
				"buffer_size": 2775,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Assets/all_states.txt",
			"settings":
			{
				"buffer_size": 3106,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 284 files for \"1 <<\" (regex, case sensitive)\n\nC:\\Files\\Development\\Game_Jam\\LudumDare37\\Assets\\Audio\\recordings_data\\e00\\d00\\e00001b8.au:\n    <binary>\n\nC:\\Files\\Development\\Game_Jam\\LudumDare37\\Assets\\Scripts\\Player\\PlayerRigidbody.cs:\n   91  \n   92  \t    isGrounded = Physics2D.OverlapBox(transform.position + (Vector3) groundCheckOffset, groundCheckSize, 0,\n   93: \t        1 << LayerMask.NameToLayer(\"Solid\"));\n   94  \n   95  \t    Debug.DrawLine(transform.position - (Vector3)groundCheckSize/2, transform.position + (Vector3)groundCheckSize / 2);\n   ..\n  249      {\n  250          var left = Physics2D.Raycast(groundCheckLeft.position, Vector2.down, 10,\n  251:             1 << LayerMask.NameToLayer(\"Solid\"));\n  252  \n  253          var right = Physics2D.Raycast(groundCheckRight.position, Vector2.down, 10,\n  254:             1 << LayerMask.NameToLayer(\"Solid\"));\n  255  \n  256          if (left && right)\n\nC:\\Files\\Development\\Game_Jam\\LudumDare37\\Assets\\Scripts\\Player\\PlayerScript.cs:\n  333          {\n  334              Physics2D.Raycast(sideCheckBottom.position, Vector2.right * Mathf.Sign(velocity), 10,\n  335:                 1 << LayerMask.NameToLayer(\"Solid\")),\n  336              Physics2D.Raycast(sideCheckTop.position, Vector2.right * Mathf.Sign(velocity), 10,\n  337:                 1 << LayerMask.NameToLayer(\"Solid\")),\n  338          };\n  339  \n  ...\n  341          {\n  342              rays.Add(Physics2D.Raycast(altSideCheckBottom.position, Vector2.right * Mathf.Sign(velocity), 11,\n  343:                 1 << LayerMask.NameToLayer(\"Solid\")));\n  344              rays.Add(Physics2D.Raycast(altSideCheckTop.position, Vector2.right * Mathf.Sign(velocity), 11,\n  345:                 1 << LayerMask.NameToLayer(\"Solid\")));\n  346          }\n  347  \n  ...\n  354      {\n  355          var left = Physics2D.Raycast(groundCheckLeft.position, Vector2.down, 10,\n  356:             1 << LayerMask.NameToLayer(\"Solid\"));\n  357  \n  358          var right = Physics2D.Raycast(groundCheckRight.position, Vector2.down, 10,\n  359:             1 << LayerMask.NameToLayer(\"Solid\"));\n  360  \n  361          if (left && right)\n  ...\n  370      {\n  371          var left = Physics2D.Raycast(headCheckLeft.position, Vector2.up, 10,\n  372:             1 << LayerMask.NameToLayer(\"Solid\"));\n  373  \n  374          var right = Physics2D.Raycast(headCheckRight.position, Vector2.up, 10,\n  375:             1 << LayerMask.NameToLayer(\"Solid\"));\n  376  \n  377          if (left && right)\n\n12 matches across 3 files\n",
			"settings":
			{
				"buffer_size": 2519,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "Assets/Scripts/Player/PlayerRigidbody.cs",
			"settings":
			{
				"buffer_size": 6347,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "for i in product((chr(x) for x in range(60, 256, 1)), (chr(x) for x in range(60, 256, 1)):\n    out(i)\n\nfor pos in product(*([range(2)] * 8)):\n    out(pos)",
			"settings":
			{
				"buffer_size": 154,
				"line_ending": "Windows",
				"name": "for i in product((chr(x) for x in range(60, 256, 1"
			}
		},
		{
			"file": "/C/Users/jkg/Downloads/untitled.ceol",
			"settings":
			{
				"buffer_size": 543,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class BloodExplosion : MonoBehaviour {\n\n    public GameObject bloodPrefab;\n    public int amount;\n    public float minLifeTime;\n    public float maxLifeTime;\n    public float force;\n    public Sprite[] sprites;\n    private GameObjectPool bloodPool;\n\n\t// Use this for initialization\n\tvoid Start () {\n\t\tbloodPool = FindObjectOfType<GameObjectPool>();\n\n\t   \tfor (int i = amount; i >= 0; --i) {\n            var go = bloodPool.Depool();\n            go.transform.position = transform.position;\n            go.GetComponent<Rigidbody2D>().velocity = (Random.insideUnitCircle + Vector2.up) * force;\n            go.GetComponent<SpriteRenderer>().sprite = sprites[Random.Range(0, sprites.Length-1)];\n            StartCoroutine(killBlood(go, Random.Range(minLifeTime, maxLifeTime)));\n        }\n\t\tkillExplosion(maxLifeTime + 0.1f);\n\t}\n\n\tprivate IEnumerator killExplosion(float seconds) {\n\t\tyield return new WaitForSeconds(seconds);\n\t\tDestroy(gameObject);\n\t}\n\n    private IEnumerator killBlood(GameObject go, float seconds) {\n        yield return new WaitForSeconds(seconds);\n        bloodPool.Repool(go);\n    }\n}\n",
			"file": "Assets/Scripts/BloodExplosion.cs",
			"file_size": 1190,
			"file_write_time": 131260098910761965,
			"settings":
			{
				"buffer_size": 1187,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Spring : MonoBehaviour\n{\n\tpublic Sprite[] anim;\n    public float interval = 0.06f;\n\n    private SpriteRenderer spriteRenderer;\n\n    public void Start()\n    {\n        spriteRenderer = GetComponent<SpriteRenderer>();\n    }\n\n    public void OnPlayerCollision()\n    {\n\t\tSoundManager.single.PlaySpringBoardSound();\n        StartCoroutine(Animation());\n    }\n\n    private IEnumerator Animation()\n    {\n\t\tforeach (var s in anim) {\n\t\t\tspriteRenderer.sprite = s;\n\t\t\tyield return new WaitForSeconds(interval);\n\t\t}\n    }\n}\n",
			"file": "Assets/Scripts/Spring.cs",
			"file_size": 608,
			"file_write_time": 131261136191949997,
			"settings":
			{
				"buffer_size": 605,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 375.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"synpl",
				"Set Syntax: Plain Text"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"code",
				"Code Folding: Fold Tag Attributes"
			],
			[
				"packagecon",
				"Package Control: Remove Package"
			],
			[
				"lua",
				"Set Syntax: Lua"
			],
			[
				"snippet din",
				"Snippet: dingheart"
			],
			[
				"c++",
				"Set Syntax: C++ JKG"
			],
			[
				"pacre",
				"Package Control: Remove Package"
			],
			[
				"pacinsc",
				"Package Control: Install Package"
			],
			[
				"packins",
				"Package Control: Install Package"
			],
			[
				"packre",
				"Package Control: Remove Package"
			],
			[
				"packin",
				"Package Control: Install Package"
			],
			[
				"ci",
				"Set Syntax: C Improved JKG"
			],
			[
				"jkg",
				"Set Syntax: C++ JKG"
			],
			[
				"scop",
				"Scope Hunter: Toggle Instant Scoper"
			],
			[
				"XML",
				"Set Syntax: XML"
			],
			[
				"sco",
				"Scope Hunter: Toggle Instant Scoper"
			],
			[
				"pacin",
				"Package Control: Install Package"
			],
			[
				"paclre",
				"Package Control: Remove Package"
			],
			[
				"Sco",
				"Toggle ScopeAlways"
			],
			[
				"c++ ",
				"Set Syntax: C++ JKG"
			],
			[
				"c im",
				"Set Syntax: C Improved"
			],
			[
				"Package Control: ",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"revf",
				"TodoReview: Project Files"
			],
			[
				"revi",
				"TodoReview: Project Files"
			],
			[
				"TodoRe",
				"TodoReview: Open Files"
			],
			[
				"TOdo",
				"TodoReview: Project Files"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"togg",
				"Toggle Comment"
			],
			[
				"cim",
				"Set Syntax: C Improved"
			],
			[
				"packacin",
				"Package Control: Install Package"
			],
			[
				"syntci",
				"Set Syntax: C Improved"
			],
			[
				"comm",
				"Toggle Comment"
			],
			[
				"revire",
				"TodoReview: Project Files"
			],
			[
				"todore",
				"TodoReview: Project Files"
			],
			[
				"syntax ci",
				"Set Syntax: C Improved"
			],
			[
				"todo",
				"TodoReview: Project Files"
			],
			[
				"synpla",
				"Set Syntax: Plain Text"
			],
			[
				"pack",
				"Preferences: Package Control Settings – Default"
			],
			[
				"packcon",
				"Package Control: Upgrade Package"
			],
			[
				"packageconrolre",
				"Package Control: Remove Package"
			],
			[
				"packremo",
				"Package Control: Remove Package"
			],
			[
				"packrep",
				"Package Control: Remove Package"
			],
			[
				"packro",
				"Package Control: Remove Channel"
			],
			[
				"packrem",
				"Package Control: Remove Package"
			],
			[
				"pacremo",
				"Package Control: Remove Package"
			],
			[
				"pacremop",
				"Package Control: Remove Package"
			],
			[
				"packacremov",
				"Package Control: Remove Package"
			],
			[
				"packremop",
				"Package Control: Remove Package"
			],
			[
				"packremov",
				"Package Control: Remove Package"
			],
			[
				"parem",
				"Package Control: Remove Channel"
			],
			[
				"packcore",
				"Package Control: Remove Package"
			],
			[
				"co",
				"Toggle Comment"
			],
			[
				"syc++",
				"Set Syntax: C++"
			],
			[
				"package",
				"Package Control: Disable Package"
			],
			[
				":w",
				":w - Save"
			],
			[
				"comme",
				"Toggle Comment"
			],
			[
				":W",
				":w - Save"
			],
			[
				"user",
				"Preferences: Settings - User"
			],
			[
				":q",
				"Coffee: Quick Run Bar"
			],
			[
				"syntax pa",
				"Set Syntax: Pascal"
			],
			[
				"packacontolin",
				"Package Control: Advanced Install Package"
			],
			[
				":s",
				":w - Save"
			],
			[
				"close",
				"Project: Close"
			],
			[
				"revers",
				"Permute Lines: Reverse"
			],
			[
				"rev",
				"Permute Lines: Reverse"
			],
			[
				"line",
				"Sort Lines"
			],
			[
				":10",
				"Emmet: Decrement Number by 10"
			],
			[
				"syntax er",
				"Set Syntax: Erlang"
			],
			[
				"syn",
				"Set Syntax: Haxe"
			],
			[
				"synmat",
				"Set Syntax: MATLAB"
			],
			[
				"syntax",
				"Set Syntax: LICENSE"
			],
			[
				"syntaxjav",
				"Set Syntax: JavaScript"
			],
			[
				"syntax scss",
				"Set Syntax: SCSS"
			],
			[
				"syntax l",
				"Set Syntax: Less"
			],
			[
				"syntaxph",
				"Set Syntax: PHP"
			],
			[
				"pl",
				"Set Syntax: Plain Text"
			],
			[
				"save",
				"File: Save All"
			],
			[
				"Package Control: re",
				"Package Control: Remove Package"
			],
			[
				"mark",
				"Set Syntax: Markdown"
			],
			[
				"reind",
				"Indentation: Reindent Lines"
			],
			[
				"in",
				"Indentation: Reindent Lines"
			],
			[
				"heade",
				"Snippet: HeaderGuard"
			],
			[
				"view",
				"View: Toggle Menu"
			],
			[
				"",
				"View: Toggle Menu"
			],
			[
				"syntaxc++",
				"Set Syntax: C++ Todo - Note - Important"
			],
			[
				"lis",
				"Set Syntax: Lisp"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"lisp",
				"Set Syntax: Lisp"
			],
			[
				"hea",
				"Snippet: HeaderGuard"
			],
			[
				"head",
				"Snippet: HeaderGuard"
			],
			[
				"he",
				"Snippet: HeaderGuard"
			],
			[
				"syntax c",
				"Set Syntax: C"
			],
			[
				"lint",
				"SublimeLinter: Toggle Linter"
			],
			[
				"linter",
				"SublimeLinter: Choose Mark Style"
			],
			[
				"sublinter",
				"SublimeLinter: Choose Gutter Theme"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"subllinter",
				"SublimeLinter: Next Error"
			],
			[
				"subli",
				"Preferences: SublimeLinter Settings – Default"
			],
			[
				"sync",
				"Set Syntax: C++"
			],
			[
				"c",
				"Set Syntax: C"
			],
			[
				"c+",
				"Set Syntax: C++"
			],
			[
				"markdo",
				"Set Syntax: Markdown"
			],
			[
				"markdown",
				"Set Syntax: MultiMarkdown"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"scss",
				"Set Syntax: SCSS"
			],
			[
				"sass",
				"Set Syntax: Sass"
			],
			[
				"json",
				"Set Syntax: JSON"
			],
			[
				"Snippet: ",
				"Snippet: dash"
			],
			[
				"packremp",
				"Package Control: Remove Package"
			],
			[
				"slim",
				"Set Syntax: Ruby Slim"
			],
			[
				"syntac",
				"Set Syntax: C++"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"syntaxsas",
				"Set Syntax: Sass"
			],
			[
				"packr",
				"Package Control: Remove Package"
			],
			[
				"scs",
				"Set Syntax: SCSS"
			],
			[
				"coffe",
				"Set Syntax: CoffeeScript"
			],
			[
				"fast",
				"Coffee: Fast Compile"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"crim",
				"Set Syntax: Crimson"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"syntad",
				"Set Syntax: D"
			],
			[
				"syntax d",
				"Set Syntax: D"
			],
			[
				"paclin",
				"Package Control: Install Package"
			],
			[
				"proce",
				"Set Syntax: Processing"
			],
			[
				"jav",
				"Set Syntax: Java"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"jade",
				"Set Syntax: Jade"
			]
		],
		"width": 418.0
	},
	"console":
	{
		"height": 251.0,
		"history":
		[
			"(1<<32)-1",
			"1<<32",
			"1<<63",
			"1<<64",
			"1<<31",
			"2<<24",
			"2^5",
			"2^4",
			"2^2",
			"44",
			"import urllib.request,os; pr='Preferences.sublime-settings'; ip='ignored_packages'; n='Package Control'; s=sublime.load_settings(pr); ig=s.get(ip); ig.append(n); s.set(ip,ig); sublime.save_settings('Preferences.sublime-settings'); pf=n+'.sublime-package'; urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler())); by=urllib.request.urlopen('https://packagecontrol.io/'+pf.replace(' ','%20')).read(); open(os.path.join(sublime.installed_packages_path(),pf),'wb').write(by); ig.remove(n); s.set(ip,ig); sublime.save_settings(pr); print('Package Control: 3.0.0 upgrade successful!')",
			"1699 + 1799",
			"for (i in (0..100)) print (i)",
			"for (i in Range(0..100)) print (i)",
			"for (i in [0..100]) print (i)",
			"print(\"mormo\")",
			"def rFac (n):",
			"True & False | True & False",
			"True & False | True & True",
			"True & True | False & True",
			"True & True | True & False",
			"True & True || True & False",
			"True & True || True && False",
			"True & True",
			"True & False",
			"True && False",
			"True &&",
			"True",
			"1 == 0",
			"1",
			"yes",
			"true and false or true and true",
			"true && false || true && true",
			"a",
			"a = 0",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"74 << 16",
			"quit()",
			"quit",
			"exit",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": false,
		"show_minimap": false,
		"show_open_files": true,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Files/Development/Game_Jam/LudumDare37/Assets"
	],
	"file_history":
	[
		"/C/Files/Development/Game_Jam/LudumDare37/Assets/Scripts/LevelManager.cs",
		"/C/Files/Development/Game_Jam/LudumDare37/Assets/Resources/all_states.txt",
		"/C/Files/Development/Game_Jam/LudumDare37/Assets/Scripts/Tile.cs",
		"/C/Files/Development/Game_Jam/LudumDare37/Assets/Scripts/TileGenerator.cs",
		"/C/Files/Development/Game_Jam/LudumDare37/Assets/Scripts/PlayerScript.cs",
		"/C/Users/jkg/Music/Loop1.prg",
		"/C/Files/Development/Game_Jam/LudumDare37/Assets/all_states.txt",
		"/C/Files/Development/Game_Jam/LudumDare37/Assets/PlayerMovement.cs",
		"/C/Files/Development/Game_Jam/LudumDare37/Assets/PlayerScript.cs",
		"/C/Files/Development/Game_Jam/LudumDare37/Assets/LevelManager.cs",
		"/C/Files/Development/Game_Jam/LudumDare37/Assets/Scripts/CubePlatform.cs",
		"/C/Users/jkg/Documents/Unity Projects/SimplexNoise/Assets/GenTexture.cs",
		"/C/Users/jkg/Documents/Unity Projects/SimplexNoise/Assets/SimplexNoise.cs",
		"/C/Files/Development/Others/Punity/build.bat",
		"/C/Users/jkg/Documents/Unity Projects/Trimono App/Assets/Scripts/piece.cs",
		"/C/Users/jkg/Desktop/Punity-master/build.bat",
		"/C/Users/jkg/Desktop/Punity-master/punity.c",
		"/C/Users/jkg/Desktop/Punity-master/main.c",
		"/C/Users/jkg/Desktop/Punity-master/README.md",
		"/C/Users/jkg/Desktop/Punity-master/main.rc",
		"/C/Users/jkg/Desktop/Punity-master/config.h",
		"/C/Users/jkg/Documents/Unity Projects/Trimono App/Assets/Scripts/players.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/_scripts/enemy.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/enemy.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/Cell.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/GenLevel.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/Falling_Blocks.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/Player_Controls.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/Timing.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/tracking.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/_scripts/Timing.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/_scripts/tracking.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/_scripts/Player_Input.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/_scripts/Character_Controller.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/_scripts/Util.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/mov_test.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/_scripts/Functions.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/_scripts/circle_bot.cs",
		"/C/Users/jkg/Documents/Unity Projects/Geocide/Assets/Scripts/ower_time.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/move_up.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/_scripts/Game_Speed.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/_scripts/Player_Controls.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/_scripts/Sine_Bullet.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/_scripts/Alt_Player_Controls.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/bullet_script.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/Alt_Player_Controls.cs",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/Player_Controls.cs.meta",
		"/C/Users/jkg/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/jkg/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/C/Users/jkg/Documents/Unity Projects/Ludum Dare 34 - Two Buttons/Assets/player_controls.cs",
		"/C/Users/jkg/Google Drev/VUC Noter/Dansk/dan-15-12-09.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-12-08.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Engelsk/eng-15-12-08.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Dansk/dan-15-12-02.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-12-02.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-12-01.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Kemi/kem-15-11-27.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Kemi/kem-15-12-04.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Engelsk/eng-15-11-30.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-12-03.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Kemi/kem-15-09-25.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Dansk/dan-15-11-18.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Dansk/dan-15-11-23.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-11-23.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Engelsk/eng-15-11-24.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-11-24.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-11-26.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Engelsk/eng-15-11-26.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Kemi/kem-15-11-12.md",
		"/C/Users/jkg/Google Drev/VUC Noter/En",
		"/C/Users/jkg/Documents/Unity Projects/Geocide/Assets/Scripts/Level_Map.cs",
		"/C/Users/jkg/Google Drev/VUC Noter/Engelsk/eng-15-11-02.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Engelsk/eng-15-11-11.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-11-12.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-11-16.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-11-11.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Dansk/dan-15-11-11.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-11-02.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-09-14.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-10-29.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-10-27.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-10-26.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-10-22.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-10-21.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-10-20.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-10-05.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-09-30.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-09-28.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-09-24.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-09-17.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-09-16.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-09-15.md",
		"/C/Users/jkg/Documents/Unity Projects/Geocide/Assets/simplex_level_gen.cs",
		"/C/Users/jkg/Documents/Unity Projects/Geocide/Assets/Scripts/noise.cs",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-11-10.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-11-03.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-11-02.md",
		"/C/Users/jkg/Documents/Unity Projects/SimplexNoise/Assets/FastNoise.cs",
		"/C/Users/jkg/Documents/Unity Projects/Geocide/Assets/Scripts/util.cs",
		"/C/Users/jkg/Documents/Unity Projects/Trimono App/Assets/Scripts/Old_Scripts/camera_controls.cs",
		"/C/Users/jkg/Google Drev/VUC Noter/Kemi/kem-15-11-06.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Dansk/dan-15-11-09.md",
		"/C/Users/jkg/Documents/Unity Projects/Geocide/Assets/Quad/TextureCreator.cs",
		"/C/Users/jkg/Documents/Unity Projects/Geocide/Assets/Noise.cs",
		"/C/Users/jkg/Documents/Unity Projects/Geocide/Assets/Scripts/wall_generator.cs",
		"/C/Users/jkg/Documents/Unity Projects/Geocide/Assets/Flow/Flow3D.cs",
		"/C/Users/jkg/Google Drev/VUC Noter/Engelsk/eng-15-08-20.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/mat-15-11-05.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Dansk/dan-15-10-26.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Kemi/kem-15-10-23.md",
		"/C/Users/jkg/Desktop/t3st.crim",
		"/C/Users/jkg/Google Drev/VUC Noter/Kemi/kem-15-10-30.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Dansk/dan-15-11-02.md",
		"/C/Users/jkg/Desktop/Old Game Maker game JKG/Games/Old Game Maker game JKG/objects",
		"/C/Users/jkg/Desktop/Old Game Maker game JKG/Games/Old Game Maker game JKG/rooms",
		"/C/Users/jkg/Desktop/Old Game Maker game JKG/Games/Old Game Maker game JKG/sounds",
		"/C/Users/jkg/Desktop/Old Game Maker game JKG/Old Game Maker game JKG.exe",
		"/C/Users/jkg/Desktop/minlaering.dk.har",
		"/C/wamp/bin/apache/Apache2.4.4/conf/httpd.conf",
		"/C/Users/jkg/Google Drev/VUC Noter/Kemi/kem-15-08-21.md",
		"/C/wamp/www/NewMiscellus/contents/author.body (2).html",
		"/C/wamp/www/NewMiscellus/.htaccess",
		"/C/Users/jkg/Downloads/AssignmentBAutomaticUpgrade.rtf",
		"/C/Users/jkg/Google Drev/VUC Noter/Dansk/dan-15-09-07.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Dansk/dan-15-09-16.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Dansk/dan-15-09-28.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/15-09-14.md",
		"/C/Users/jkg/Google Drev/VUC Noter/Matematik/15-09-15.md"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 96.0,
		"where_history":
		[
			"<open folders>",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"1 <<",
			"+",
			"Play",
			"_source",
			" ",
			"SoundSorce",
			"=",
			"AudioClip",
			"public",
			"active",
			"enabled",
			"maxActive",
			"deactives",
			"lastDeactive",
			"Respawn",
			"anim",
			"#",
			"##########",
			"tiles",
			"AdvanceState",
			"Start",
			"'",
			"{",
			"Tile.State.Empty",
			"levelStateIndex",
			"tileGenerator",
			"b",
			"a",
			"^",
			"player",
			"Alt_Player_Controls",
			"Functions",
			"test",
			"Sine_Bullet",
			"mean",
			"Timing.",
			"date_of_birth",
			"key2",
			"Time.deltaTime",
			"move_fuel_max",
			"move_fuel",
			"LineRenderer",
			"wave_period",
			"float",
			"player_offser_from_turn_origin",
			"temp_radius",
			"direction",
			"turn_rad",
			"direc",
			"it",
			"t_left",
			"KeyCode.J",
			"KeyCode.",
			"radi_speeds",
			"direction",
			"radius_index",
			"adjust_t",
			"adjust_interval",
			"adjust_t",
			"temp_radius",
			"temp_speed",
			"key_delay",
			"did_change_direction",
			"time_running",
			"speed",
			"turn_radius",
			"time_running",
			"paused",
			"move_fuel",
			"direction",
			"clockwise",
			"\n\t\t",
			"clock",
			"map",
			"cur_coord",
			"cell_y",
			"x",
			"move_fuel_pub",
			"follow_player",
			"target_range",
			"temp_radius",
			"radius",
			"radi_speeds",
			"rad",
			"radi",
			"radi_speeds",
			"radi",
			"radi_speeds",
			"clockwise",
			"direction",
			"false",
			"clockwise",
			"seconds_since_j",
			"key_delay",
			"space",
			"!\");\n",
			"else",
			"commit_move",
			"j_pressed_frames",
			"seconds_since_space",
			"int",
			"space_pressed_frames",
			"round_duration",
			"SetPoints",
			"Rigidbody2D",
			"rb",
			"public",
			"100",
			"40",
			"trasnform",
			"velocity",
			"mean",
			"rigidbody",
			"float",
			"arc",
			"_step",
			"arc",
			"angle_step",
			"arc_length",
			"delta_radians",
			"arc_length",
			"enheder",
			"deltaCircumference",
			"turn_origin",
			"subdivs",
			"white",
			"last_ang",
			"ang"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"X",
			"$2/(1.417**$1)",
			"$1",
			".ci$1",
			"NavLink",
			"V3",
			"DAB98F",
			"FF00FF",
			"c8b464",
			">\\n<",
			"C8B464",
			"141414",
			"WINDOW_WIDTH",
			"0f76b7",
			"UpdateLoopThrottle",
			"OK = false;",
			"<p>\\n\\t",
			"\\n</p>",
			"\\n<p>",
			"<p>",
			"$1\\n",
			"ø",
			"æ",
			"å",
			",",
			",\\n",
			",",
			",\\n",
			",",
			"FALSK",
			"SAND",
			"\"$1\":\\[,,\\]",
			"",
			",\"$1\"",
			"\\n",
			"",
			"\\n",
			"",
			"\\n",
			"",
			"\\n",
			"",
			"\\n",
			"",
			"\\n",
			"",
			"$1\\n",
			"liv$1",
			"tilværels$1",
			"$1 og $2",
			"Flipped$1Learning",
			"$1",
			"$1learning",
			"p($1)",
			"case $1: return $2",
			"p[] = $1;\\n",
			"p[] = $1\\n;",
			"p[] = $1;",
			"__$1__:\\n",
			"__$1__:\\n\\n",
			"__$1__",
			"__$1__:",
			"__$1__",
			"^__$1__$",
			"\\n__$1__",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 11,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Assets/Scripts/TimeControl.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 989,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/ColorSchemes/Xcode_default.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.preview_meta":
							{
							},
							"color_helper.scan":
							{
								"current_ext": ".cs",
								"current_syntax": "C#/C#",
								"enabled": false,
								"last_updated": 1481646778.12
							},
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Assets/Scripts/TileGenerator.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 953,
						"regions":
						{
						},
						"selection":
						[
							[
								591,
								591
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/ColorSchemes/Xcode_default.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".cs",
								"current_syntax": "C#/C#",
								"enabled": false,
								"last_updated": 1481499076.44
							},
							"syntax": "Packages/C#/C#.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Assets/Scripts/Spike.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 268,
						"regions":
						{
						},
						"selection":
						[
							[
								265,
								265
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/ColorSchemes/Xcode_default.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".cs",
								"current_syntax": "C#/C#",
								"enabled": false,
								"last_updated": 1481499076.44
							},
							"syntax": "Packages/C#/C#.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Assets/Scripts/Pickup.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 807,
						"regions":
						{
						},
						"selection":
						[
							[
								370,
								370
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/ColorSchemes/Xcode_default.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".cs",
								"current_syntax": "C#/C#",
								"enabled": false,
								"last_updated": 1481499076.44
							},
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Assets/Scripts/PlayerScript.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11355,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/ColorSchemes/Xcode_default.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".cs",
								"current_syntax": "C#/C#",
								"enabled": false,
								"last_updated": 1481499076.44
							},
							"syntax": "Packages/C#/C#.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 5739.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "Assets/Scripts/ObjectPool.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 812,
						"regions":
						{
						},
						"selection":
						[
							[
								756,
								756
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/ColorSchemes/Xcode_default.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".cs",
								"current_syntax": "C#/C#",
								"enabled": false,
								"last_updated": 1481530452.76
							},
							"syntax": "Packages/C#/C#.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Assets/Scripts/GameObjectPool.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 898,
						"regions":
						{
						},
						"selection":
						[
							[
								898,
								898
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/ColorSchemes/Xcode_default.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".cs",
								"current_syntax": "C#/C#",
								"enabled": false,
								"last_updated": 1481530452.76
							},
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 7,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 80,
						"regions":
						{
						},
						"selection":
						[
							[
								80,
								80
							]
						],
						"settings":
						{
							"auto_name": "",
							"color_helper.box_height": 48,
							"color_helper.color_scheme": "Packages/User/ColorSchemes/Xcode_default.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": null,
								"current_syntax": "Text/Plain text",
								"enabled": false,
								"last_updated": 1481530452.76
							},
							"default_dir": "C:\\Files\\Development\\Game_Jam\\LudumDare37\\Assets",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "Assets/Scripts/SoundManager.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2298,
						"regions":
						{
						},
						"selection":
						[
							[
								1414,
								1414
							]
						],
						"settings":
						{
							"color_helper.box_height": 22,
							"color_helper.color_scheme": "Packages/User/ColorSchemes/Xcode_default.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".cs",
								"current_syntax": "C#/C#",
								"enabled": false,
								"last_updated": 1481530452.76
							},
							"syntax": "Packages/C#/C#.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 484.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/C/Files/Development/Game_Jam/LudumDare37_merger/LudumDare37/Assets/Scripts/PlayerScript.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11799,
						"regions":
						{
						},
						"selection":
						[
							[
								3869,
								3869
							]
						],
						"settings":
						{
							"color_helper.box_height": 21,
							"color_helper.color_scheme": "Packages/User/ColorSchemes/Xcode_default.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".cs",
								"current_syntax": "C#/C#",
								"enabled": false,
								"last_updated": 1481634789.69
							},
							"syntax": "Packages/C#/C#.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 2686.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/C/Files/Development/Game_Jam/LudumDare37_merger/LudumDare37/Assets/all_states.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2775,
						"regions":
						{
						},
						"selection":
						[
							[
								220,
								220
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/ColorSchemes/Xcode_default.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.preview_meta":
							{
							},
							"color_helper.scan":
							{
								"current_ext": ".txt",
								"current_syntax": "Text/Plain text",
								"enabled": false,
								"last_updated": 1481646778.12
							},
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "Assets/all_states.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3106,
						"regions":
						{
						},
						"selection":
						[
							[
								964,
								964
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/ColorSchemes/Xcode_default.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.preview_meta":
							{
							},
							"color_helper.scan":
							{
								"current_ext": ".txt",
								"current_syntax": "Text/Plain text",
								"enabled": false,
								"last_updated": 1481646778.12
							},
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1207.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 12,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2519,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										386,
										390
									],
									[
										686,
										690
									],
									[
										841,
										845
									],
									[
										1148,
										1152
									],
									[
										1311,
										1315
									],
									[
										1538,
										1542
									],
									[
										1714,
										1718
									],
									[
										1904,
										1908
									],
									[
										2059,
										2063
									],
									[
										2261,
										2265
									],
									[
										2412,
										2416
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								389,
								389
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/ColorSchemes/Xcode_default.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.preview_meta":
							{
							},
							"color_helper.scan":
							{
								"current_ext": null,
								"current_syntax": "Default/Find Results",
								"enabled": false,
								"last_updated": 1481646778.12
							},
							"default_dir": "C:\\Files\\Development\\Game_Jam\\LudumDare37\\Assets",
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "Assets/Scripts/Player/PlayerRigidbody.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6347,
						"regions":
						{
						},
						"selection":
						[
							[
								2133,
								2168
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/ColorSchemes/Xcode_default.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.preview_meta":
							{
							},
							"color_helper.scan":
							{
								"current_ext": ".cs",
								"current_syntax": "C#/C#",
								"enabled": false,
								"last_updated": 1481646778.12
							},
							"syntax": "Packages/C#/C#.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1178.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 14,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 154,
						"regions":
						{
						},
						"selection":
						[
							[
								154,
								102
							]
						],
						"settings":
						{
							"auto_name": "for i in product((chr(x) for x in range(60, 256, 1",
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/ColorSchemes/Xcode_default.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.preview_meta":
							{
							},
							"color_helper.scan":
							{
								"current_ext": null,
								"current_syntax": "Text/Plain text",
								"enabled": false,
								"last_updated": 1481634789.69
							},
							"default_dir": "C:\\Files\\Development\\Game_Jam\\LudumDare37\\Assets",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "/C/Users/jkg/Downloads/untitled.ceol",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 543,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/ColorSchemes/Xcode_default.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.preview_meta":
							{
							},
							"color_helper.scan":
							{
								"current_ext": ".ceol",
								"current_syntax": "Text/Plain text",
								"enabled": false,
								"last_updated": 1481646778.12
							},
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "Assets/Scripts/BloodExplosion.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1187,
						"regions":
						{
						},
						"selection":
						[
							[
								942,
								942
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/ColorSchemes/Xcode_default.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".cs",
								"current_syntax": "C#/C#",
								"enabled": false,
								"last_updated": 1481530452.76
							},
							"syntax": "Packages/C#/C#.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 27.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "Assets/Scripts/Spring.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 605,
						"regions":
						{
						},
						"selection":
						[
							[
								542,
								593
							]
						],
						"settings":
						{
							"color_helper.box_height": 17,
							"color_helper.color_scheme": "Packages/User/ColorSchemes/Xcode_default.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"current_ext": ".cs",
								"current_syntax": "C#/C#",
								"enabled": false,
								"last_updated": 1481499076.44
							},
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": false,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/Build Systems/lua.sublime-build",
	"project": "Unity.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\Files\\Development\\Game_Jam\\LudumDare37_merger\\LudumDare37\\Assets\\all_states.txt"
			],
			[
				"soundm",
				"Scripts\\SoundManager.cs"
			],
			[
				"pickup",
				"Scripts\\Pickup.cs"
			],
			[
				"level",
				"Scripts\\LevelManager.cs"
			],
			[
				"cha",
				"_scripts\\Character_Controller.cs"
			],
			[
				"tim",
				"_scripts\\Timing.cs"
			],
			[
				"playercon",
				"Player_Controls.cs"
			],
			[
				"win",
				"win32_handmade_jkg.cpp"
			],
			[
				"handmad",
				"handmade_jkg.h"
			],
			[
				"bui",
				"build.bat"
			],
			[
				"bu",
				"build.bat"
			],
			[
				"w",
				"winapp.cpp"
			],
			[
				"b",
				"build.bat"
			],
			[
				"wi",
				"winapp.cpp"
			],
			[
				"bi",
				"build.bat"
			],
			[
				"ci",
				"C:\\Users\\jkg\\AppData\\Roaming\\Sublime Text 3\\Packages\\User\\Syntax Definitions\\C Improved\\C Improved.tmLanguage"
			],
			[
				"c",
				"C:\\Users\\jkg\\AppData\\Roaming\\Sublime Text 3\\Packages\\User\\Syntax Definitions\\C Improved\\C Improved.tmLanguage"
			],
			[
				"todo",
				"TodoReview"
			],
			[
				"bb",
				"build.bat"
			],
			[
				"biu",
				"build.bat"
			],
			[
				"wa",
				"winapp.cpp"
			],
			[
				"css",
				"styles\\all.css"
			],
			[
				"ud",
				"C:\\Users\\jkg\\Google Drev\\Ud over programmering på VH.md"
			],
			[
				"all",
				"styles\\all.css"
			],
			[
				"al",
				"styles\\all.css"
			],
			[
				"a",
				"styles\\all.css"
			],
			[
				"in",
				"index.html"
			],
			[
				"this",
				"images\\This.svg"
			],
			[
				"ind",
				"index.html"
			],
			[
				"sub",
				"subjects\\index.html"
			],
			[
				"memo",
				"Code\\ShapesismMemory.cpp"
			],
			[
				"mat",
				"Code\\ShapesismMath.h"
			],
			[
				"shpp",
				"Code\\Shapesism.cpp"
			],
			[
				"ma",
				"Code\\ShapesismMath.h"
			],
			[
				"mem",
				"Code\\ShapesismMemory.cpp"
			],
			[
				"sh",
				"Code\\Shapesism.h"
			],
			[
				"sham",
				"Code\\ShapesismMath.h"
			],
			[
				"cpp",
				"Code\\Shapesism.cpp"
			],
			[
				"shh",
				"Code\\Shapesism.h"
			],
			[
				"shacpp",
				"Code\\Shapesism.cpp"
			],
			[
				"main.",
				"styles\\main.css"
			],
			[
				"jad",
				"_prep\\markup\\index.jade"
			],
			[
				"hpp",
				"typedefs_and_pound-defines.hpp"
			],
			[
				"base.a",
				"styles\\base.sass"
			],
			[
				"inde",
				"index.html"
			],
			[
				"ga",
				"s\\game.js"
			],
			[
				"ty",
				"styles\\_type2.scss"
			],
			[
				"reset",
				"styles\\_reset.scss"
			],
			[
				"x",
				"styles\\_x-rem.scss"
			],
			[
				"rem",
				"styles\\_rem.scss"
			],
			[
				"glob",
				"styles\\global.css"
			],
			[
				"res",
				"styles\\_reset.scss"
			],
			[
				"gl",
				"styles\\global.scss"
			],
			[
				"glo",
				"styles\\global.scss"
			],
			[
				"globcss",
				"styles\\global.css"
			],
			[
				"g",
				"styles\\global.css"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\Users\\jkg\\Google Drev\\VUC Afleveringer\\vuc_aflevringer.sublime-project"
			],
			[
				"crap",
				"C:\\Users\\jkg\\Documents\\c++\\Crap\\prohj.sublime-project"
			],
			[
				"10",
				"C:\\Users\\jkg\\Google Drev\\VUC Afleveringer\\Matematik\\Mat Afl 10\\project.sublime-project"
			],
			[
				"mat3",
				"C:\\Users\\jkg\\AppData\\Roaming\\Sublime Text 3\\Projects\\Mat afleveringsopgave 3.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"Inner"
			]
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": false,
	"side_bar_visible": true,
	"side_bar_width": 326.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
